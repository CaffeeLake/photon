From bb6daaa1bfe0049ec5d2f93b222525eed04e8413 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Thu, 18 Aug 2022 14:10:54 +0530
Subject: [PATCH 06/14] installer.py: check if host rpm supports sqlite backend
 db

Use `--rm` arg with all docker invocations

Change-Id: I78b6fa02d3dff62abe47cde4bb487e7693c39065
Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 photon_installer/commandutils.py | 22 ++++++++++++++++++++++
 photon_installer/installer.py    | 31 +++++++++++++++++++++----------
 2 files changed, 43 insertions(+), 10 deletions(-)

diff --git a/photon_installer/commandutils.py b/photon_installer/commandutils.py
index 6c06b60..1877463 100644
--- a/photon_installer/commandutils.py
+++ b/photon_installer/commandutils.py
@@ -17,6 +17,7 @@ from OpenSSL.crypto import load_certificate, FILETYPE_PEM
 class CommandUtils(object):
     def __init__(self, logger):
         self.logger = logger
+        self.hostRpmIsNotUsable = -1
 
     def run(self, cmd):
         self.logger.debug(cmd)
@@ -105,3 +106,24 @@ class CommandUtils(object):
             shutil.copyfileobj(r.raw, f)
 
         return True, None
+
+    def checkIfHostRpmNotUsable(self):
+        if self.hostRpmIsNotUsable >= 0:
+            return self.hostRpmIsNotUsable
+
+        # if rpm doesn't have zstd support
+        # if host rpm doesn't support sqlite backend db
+        cmds = [
+            "rpm --showrc | grep -qw 'rpmlib(PayloadIsZstd)'",
+            "rpm -E %{_db_backend} | grep -qw 'sqlite'",
+        ]
+
+        for cmd in cmds:
+            if self.run(cmd):
+                self.hostRpmIsNotUsable = 1
+                break
+
+        if self.hostRpmIsNotUsable < 0:
+            self.hostRpmIsNotUsable = 0
+
+        return self.hostRpmIsNotUsable
diff --git a/photon_installer/installer.py b/photon_installer/installer.py
index 5d019e7..e821a48 100755
--- a/photon_installer/installer.py
+++ b/photon_installer/installer.py
@@ -652,8 +652,17 @@ class Installer(object):
 
         # Initialize rpm DB
         self.cmd.run(['mkdir', '-p', os.path.join(self.photon_root, "var/lib/rpm")])
-        retval = self.cmd.run(['rpm', '--root', self.photon_root, '--initdb',
-                               '--dbpath', '/var/lib/rpm'])
+
+        rpm_db_init_cmd = f"rpm --root {self.photon_root} --initdb --dbpath /var/lib/rpm"
+        if self.cmd.checkIfHostRpmNotUsable():
+            rpm_db_init_cmd = f"tdnf install -y rpm && {rpm_db_init_cmd}"
+            retval = self.cmd.run(['docker', 'run', '--rm',
+                                  '-v', f"{self.photon_root}:{self.photon_root}",
+                                   self.install_config['photon_docker_image'],
+                                   '/bin/sh', '-c', rpm_db_init_cmd])
+        else:
+            retval = self.cmd.run(rpm_db_init_cmd)
+
         if retval != 0:
             self.logger.error("Failed to initialize rpm DB")
             self.exit_gracefully()
@@ -667,10 +676,11 @@ class Installer(object):
                                                     self.working_directory)
         retval = self.cmd.run(tdnf_cmd)
         if retval != 0:
-            retval = self.cmd.run(['docker', 'run',
-                                   '-v', self.rpm_cache_dir+':'+self.rpm_cache_dir,
-                                   '-v', self.working_directory+':'+self.working_directory,
-                                   self.install_config['photon_docker_image'], '/bin/sh', '-c', tdnf_cmd])
+            retval = self.cmd.run(["docker", "run", "--rm",
+                                   "-v", f"{self.rpm_cache_dir}:{self.rpm_cache_dir}",
+                                   "-v", f"{self.working_directory}:{self.working_directory}",
+                                   self.install_config["photon_docker_image"],
+                                   "/bin/sh", "-c", tdnf_cmd])
             if retval != 0:
                 self.logger.error("Failed to install filesystem rpm")
                 self.exit_gracefully()
@@ -960,10 +970,11 @@ class Installer(object):
                 self.logger.error(stderr.decode())
                 stderr = None
                 self.logger.info("Retry 'tdnf install' using docker image")
-                retval = self.cmd.run(['docker', 'run',
-                                       '-v', self.rpm_cache_dir+':'+self.rpm_cache_dir,
-                                       '-v', self.working_directory+':'+self.working_directory,
-                                       self.install_config['photon_docker_image'], '/bin/sh', '-c', tdnf_cmd])
+                retval = self.cmd.run(["docker", "run", "--rm",
+                                       "-v", f"{self.rpm_cache_dir}:{self.rpm_cache_dir}",
+                                       "-v", f"{self.working_directory}:{self.working_directory}",
+                                       self.install_config["photon_docker_image"],
+                                       "/bin/sh", "-c", tdnf_cmd])
 
         # 0 : succeed; 137 : package already installed; 65 : package not found in repo.
         if retval != 0 and retval != 137:
-- 
2.23.3

