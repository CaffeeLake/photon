From a47055705cd0e9554675818a3feba2c7724dde69 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Mon, 11 Jan 2021 16:46:43 +0000
Subject: [PATCH 1/8] FIPS canister binary usage

Build with fips canister and skip building crypto algorithms.
Invoke fips canister integrity check during kernel startup.

This patch can be used at two stages:
 1. Prerequisite patch for canister creation.
 2. Binary canister usage time.

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Keerthana K <keerthanak@vmware.com>
Signed-off-by: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
---
 arch/x86/crypto/Makefile |   4 --
 crypto/Makefile          | 116 ++++++++++++++++++++++++++-------
 crypto/testmgr.h         | 135 +++++++++++++++++++++++++++++++++++++++
 init/main.c              |   3 +
 lib/crypto/Makefile      |  12 ----
 5 files changed, 230 insertions(+), 40 deletions(-)

diff --git a/arch/x86/crypto/Makefile b/arch/x86/crypto/Makefile
index 3b1d701a4..3836c4e30 100644
--- a/arch/x86/crypto/Makefile
+++ b/arch/x86/crypto/Makefile
@@ -46,10 +46,6 @@ obj-$(CONFIG_CRYPTO_CHACHA20_X86_64) += chacha-x86_64.o
 chacha-x86_64-y := chacha-avx2-x86_64.o chacha-ssse3-x86_64.o chacha_glue.o
 chacha-x86_64-$(CONFIG_AS_AVX512) += chacha-avx512vl-x86_64.o
 
-obj-$(CONFIG_CRYPTO_AES_NI_INTEL) += aesni-intel.o
-aesni-intel-y := aesni-intel_asm.o aesni-intel_glue.o
-aesni-intel-$(CONFIG_64BIT) += aesni-intel_avx-x86_64.o aes_ctrby8_avx-x86_64.o
-
 obj-$(CONFIG_CRYPTO_SHA1_SSSE3) += sha1-ssse3.o
 sha1-ssse3-y := sha1_avx2_x86_64_asm.o sha1_ssse3_asm.o sha1_ssse3_glue.o
 sha1-ssse3-$(CONFIG_AS_SHA1_NI) += sha1_ni_asm.o
diff --git a/crypto/Makefile b/crypto/Makefile
index d7fcab76d..4f6f373dc 100644
--- a/crypto/Makefile
+++ b/crypto/Makefile
@@ -40,7 +40,6 @@ rsa_generic-y += rsaprivkey.asn1.o
 rsa_generic-y += rsa.o
 rsa_generic-y += rsa_helper.o
 rsa_generic-y += rsa-pkcs1pad.o
-obj-$(CONFIG_CRYPTO_RSA) += rsa_generic.o
 
 $(obj)/sm2signature.asn1.o: $(obj)/sm2signature.asn1.c $(obj)/sm2signature.asn1.h
 $(obj)/sm2.o: $(obj)/sm2signature.asn1.h
@@ -49,13 +48,11 @@ sm2_generic-y += sm2signature.asn1.o
 sm2_generic-y += sm2.o
 
 obj-$(CONFIG_CRYPTO_SM2) += sm2_generic.o
-obj-$(CONFIG_CRYPTO_SELF_TEST) += crypto_self_test.o
 
 $(obj)/ecdsasignature.asn1.o: $(obj)/ecdsasignature.asn1.c $(obj)/ecdsasignature.asn1.h
 $(obj)/ecdsa.o: $(obj)/ecdsasignature.asn1.h
 ecdsa_generic-y += ecdsa.o
 ecdsa_generic-y += ecdsasignature.asn1.o
-obj-$(CONFIG_CRYPTO_ECDSA) += ecdsa_generic.o
 
 crypto_acompress-y := acompress.o
 crypto_acompress-y += scompress.o
@@ -63,22 +60,15 @@ obj-$(CONFIG_CRYPTO_ACOMP2) += crypto_acompress.o
 
 cryptomgr-y := algboss.o testmgr.o
 
-obj-$(CONFIG_CRYPTO_MANAGER2) += cryptomgr.o
 obj-$(CONFIG_CRYPTO_USER) += crypto_user.o
 crypto_user-y := crypto_user_base.o
 crypto_user-$(CONFIG_CRYPTO_STATS) += crypto_user_stat.o
-obj-$(CONFIG_CRYPTO_CMAC) += cmac.o
-obj-$(CONFIG_CRYPTO_HMAC) += hmac.o
 obj-$(CONFIG_CRYPTO_VMAC) += vmac.o
 obj-$(CONFIG_CRYPTO_XCBC) += xcbc.o
 obj-$(CONFIG_CRYPTO_NULL2) += crypto_null.o
 obj-$(CONFIG_CRYPTO_MD4) += md4.o
 obj-$(CONFIG_CRYPTO_MD5) += md5.o
 obj-$(CONFIG_CRYPTO_RMD160) += rmd160.o
-obj-$(CONFIG_CRYPTO_SHA1) += sha1_generic.o
-obj-$(CONFIG_CRYPTO_SHA256) += sha256_generic.o
-obj-$(CONFIG_CRYPTO_SHA512) += sha512_generic.o
-obj-$(CONFIG_CRYPTO_SHA3) += sha3_generic.o
 obj-$(CONFIG_CRYPTO_SM3) += sm3.o
 obj-$(CONFIG_CRYPTO_SM3_GENERIC) += sm3_generic.o
 obj-$(CONFIG_CRYPTO_STREEBOG) += streebog_generic.o
@@ -87,21 +77,13 @@ CFLAGS_wp512.o := $(call cc-option,-fno-schedule-insns)  # https://gcc.gnu.org/b
 obj-$(CONFIG_CRYPTO_BLAKE2B) += blake2b_generic.o
 CFLAGS_blake2b_generic.o := -Wframe-larger-than=4096 #  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105930
 obj-$(CONFIG_CRYPTO_GF128MUL) += gf128mul.o
-obj-$(CONFIG_CRYPTO_ECB) += ecb.o
-obj-$(CONFIG_CRYPTO_CBC) += cbc.o
-obj-$(CONFIG_CRYPTO_CFB) += cfb.o
 obj-$(CONFIG_CRYPTO_PCBC) += pcbc.o
-obj-$(CONFIG_CRYPTO_CTS) += cts.o
 obj-$(CONFIG_CRYPTO_LRW) += lrw.o
-obj-$(CONFIG_CRYPTO_XTS) += xts.o
-obj-$(CONFIG_CRYPTO_CTR) += ctr.o
 obj-$(CONFIG_CRYPTO_XCTR) += xctr.o
 obj-$(CONFIG_CRYPTO_HCTR2) += hctr2.o
 obj-$(CONFIG_CRYPTO_KEYWRAP) += keywrap.o
 obj-$(CONFIG_CRYPTO_ADIANTUM) += adiantum.o
 obj-$(CONFIG_CRYPTO_NHPOLY1305) += nhpoly1305.o
-obj-$(CONFIG_CRYPTO_GCM) += gcm.o
-obj-$(CONFIG_CRYPTO_CCM) += ccm.o
 obj-$(CONFIG_CRYPTO_CHACHA20POLY1305) += chacha20poly1305.o
 obj-$(CONFIG_CRYPTO_AEGIS128) += aegis128.o
 aegis128-y := aegis128-core.o
@@ -128,7 +110,6 @@ CFLAGS_aegis128-neon-inner.o += -isystem $(shell $(CC) -print-file-name=include)
 
 obj-$(CONFIG_CRYPTO_PCRYPT) += pcrypt.o
 obj-$(CONFIG_CRYPTO_CRYPTD) += cryptd.o
-obj-$(CONFIG_CRYPTO_DES) += des_generic.o
 obj-$(CONFIG_CRYPTO_FCRYPT) += fcrypt.o
 obj-$(CONFIG_CRYPTO_BLOWFISH) += blowfish_generic.o
 obj-$(CONFIG_CRYPTO_BLOWFISH_COMMON) += blowfish_common.o
@@ -136,7 +117,6 @@ obj-$(CONFIG_CRYPTO_TWOFISH) += twofish_generic.o
 obj-$(CONFIG_CRYPTO_TWOFISH_COMMON) += twofish_common.o
 obj-$(CONFIG_CRYPTO_SERPENT) += serpent_generic.o
 CFLAGS_serpent_generic.o := $(call cc-option,-fsched-pressure)  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79149
-obj-$(CONFIG_CRYPTO_AES) += aes_generic.o
 CFLAGS_aes_generic.o := $(call cc-option,-fno-code-hoisting) # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83356
 obj-$(CONFIG_CRYPTO_SM4) += sm4.o
 obj-$(CONFIG_CRYPTO_SM4_GENERIC) += sm4_generic.o
@@ -167,8 +147,6 @@ obj-$(CONFIG_CRYPTO_XXHASH) += xxhash_generic.o
 obj-$(CONFIG_CRYPTO_842) += 842.o
 obj-$(CONFIG_CRYPTO_RNG2) += rng.o
 obj-$(CONFIG_CRYPTO_ANSI_CPRNG) += ansi_cprng.o
-obj-$(CONFIG_CRYPTO_DRBG) += drbg.o
-obj-$(CONFIG_CRYPTO_JITTERENTROPY) += jitterentropy_rng.o
 CFLAGS_jitterentropy.o = -O0
 KASAN_SANITIZE_jitterentropy.o = n
 UBSAN_SANITIZE_jitterentropy.o = n
@@ -183,13 +161,11 @@ obj-$(CONFIG_CRYPTO_USER_API_RNG) += algif_rng.o
 obj-$(CONFIG_CRYPTO_USER_API_AEAD) += algif_aead.o
 obj-$(CONFIG_CRYPTO_ZSTD) += zstd.o
 obj-$(CONFIG_CRYPTO_OFB) += ofb.o
-obj-$(CONFIG_CRYPTO_ECC) += ecc.o
 obj-$(CONFIG_CRYPTO_ESSIV) += essiv.o
 obj-$(CONFIG_CRYPTO_CURVE25519) += curve25519-generic.o
 
 ecdh_generic-y += ecdh.o
 ecdh_generic-y += ecdh_helper.o
-obj-$(CONFIG_CRYPTO_ECDH) += ecdh_generic.o
 
 $(obj)/ecrdsa_params.asn1.o: $(obj)/ecrdsa_params.asn1.c $(obj)/ecrdsa_params.asn1.h
 $(obj)/ecrdsa_pub_key.asn1.o: $(obj)/ecrdsa_pub_key.asn1.c $(obj)/ecrdsa_pub_key.asn1.h
@@ -213,3 +189,95 @@ obj-$(CONFIG_CRYPTO_SIMD) += crypto_simd.o
 # Key derivation function
 #
 obj-$(CONFIG_CRYPTO_KDF800108_CTR) += kdf_sp800108.o
+obj-$(CONFIG_CRYPTO_FIPS) += fips_canister_wrapper_asm.o fips_canister_wrapper.o fips_canister.o
+obj-$(CONFIG_CRYPTO_FIPS) += testmgr_fips_canister_wrapper.o aesni-intel_glue_fips_canister_wrapper.o
+
+ifdef CONFIG_CRYPTO_FIPS
+ifneq ($(CONFIG_CRYPTO_FIPS),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_FIPS=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_AEAD)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_AEAD=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_RSA)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_RSA=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_MANAGER)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_MANAGER=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_MANAGER2)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_MANAGER2=y)
+endif
+ifdef CONFIG_CRYPTO_MANAGER_DISABLE_TESTS
+  $(error FIPS canister requires CONFIG_CRYPTO_MANAGER_DISABLE_TESTS to be unset)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_HMAC)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_HMAC=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_SHA256)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_SHA256=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_SHA512)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_SHA512=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_AES)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_AES=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_DES)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_DES=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_ECB)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_ECB=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CBC)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CBC=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_XTS)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_XTS=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CTR)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CTR=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_DRBG)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_DRBG=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_DRBG_HASH)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_DRBG_HASH=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_DRBG_CTR)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_DRBG_CTR=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_JITTERENTROPY)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_JITTERENTROPY=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_ECC)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_ECC=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_ECDH)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_ECDH=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_AES_NI_INTEL)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_AES_NI_INTEL=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CFB)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CFB=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CMAC)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CMAC=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CTS)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CTS=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_ECDSA)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_ECDSA=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_CCM)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_CCM=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_GCM)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_GCM=y)
+endif
+ifneq ($(subst Y,y,$(CONFIG_CRYPTO_SHA3)),y)
+  $(error FIPS canister requires CONFIG_CRYPTO_SHA3=y)
+endif
+endif
diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index b23d8f1d9..79d6c3d0f 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -24,6 +24,81 @@
 
 #define MAX_IVLEN		32
 
+/*
+ * Need slab memory for testing (size in number of pages).
+ */
+#define XBUFSIZE	8
+
+/* flush type for hash algorithms */
+enum flush_type {
+	/* merge with update of previous buffer(s) */
+	FLUSH_TYPE_NONE = 0,
+
+	/* update with previous buffer(s) before doing this one */
+	FLUSH_TYPE_FLUSH,
+
+	/* likewise, but also export and re-import the intermediate state */
+	FLUSH_TYPE_REIMPORT,
+};
+
+/* finalization function for hash algorithms */
+enum finalization_type {
+	FINALIZATION_TYPE_FINAL,	/* use final() */
+	FINALIZATION_TYPE_FINUP,	/* use finup() */
+	FINALIZATION_TYPE_DIGEST,	/* use digest() */
+};
+
+/*
+ * Whether the crypto operation will occur in-place, and if so whether the
+ * source and destination scatterlist pointers will coincide (req->src ==
+ * req->dst), or whether they'll merely point to two separate scatterlists
+ * (req->src != req->dst) that reference the same underlying memory.
+ *
+ * This is only relevant for algorithm types that support in-place operation.
+ */
+enum inplace_mode {
+	OUT_OF_PLACE,
+	INPLACE_ONE_SGLIST,
+	INPLACE_TWO_SGLISTS,
+};
+
+/**
+ * struct test_sg_division - description of a scatterlist entry
+ *
+ * This struct describes one entry of a scatterlist being constructed to check a
+ * crypto test vector.
+ *
+ * @proportion_of_total: length of this chunk relative to the total length,
+ *			 given as a proportion out of TEST_SG_TOTAL so that it
+ *			 scales to fit any test vector
+ * @offset: byte offset into a 2-page buffer at which this chunk will start
+ * @offset_relative_to_alignmask: if true, add the algorithm's alignmask to the
+ *				  @offset
+ * @flush_type: for hashes, whether an update() should be done now vs.
+ *		continuing to accumulate data
+ * @nosimd: if doing the pending update(), do it with SIMD disabled?
+ */
+struct test_sg_division {
+	unsigned int proportion_of_total;
+	unsigned int offset;
+	bool offset_relative_to_alignmask;
+	enum flush_type flush_type;
+	bool nosimd;
+};
+
+struct test_sglist {
+	char *bufs[XBUFSIZE];
+	struct scatterlist sgl[XBUFSIZE];
+	struct scatterlist sgl_saved[XBUFSIZE];
+	struct scatterlist *sgl_ptr;
+	unsigned int nents;
+};
+
+struct cipher_test_sglists {
+	struct test_sglist src;
+	struct test_sglist dst;
+};
+
 /*
  * hash_testvec:	structure to describe a hash (message digest) test
  * @key:	Pointer to key (NULL if none)
@@ -46,6 +121,42 @@ struct hash_testvec {
 	bool fips_skip;
 };
 
+/**
+ * struct testvec_config - configuration for testing a crypto test vector
+ *
+ * This struct describes the data layout and other parameters with which each
+ * crypto test vector can be tested.
+ *
+ * @name: name of this config, logged for debugging purposes if a test fails
+ * @inplace_mode: whether and how to operate on the data in-place, if applicable
+ * @req_flags: extra request_flags, e.g. CRYPTO_TFM_REQ_MAY_SLEEP
+ * @src_divs: description of how to arrange the source scatterlist
+ * @dst_divs: description of how to arrange the dst scatterlist, if applicable
+ *	      for the algorithm type.  Defaults to @src_divs if unset.
+ * @iv_offset: misalignment of the IV in the range [0..MAX_ALGAPI_ALIGNMASK+1],
+ *	       where 0 is aligned to a 2*(MAX_ALGAPI_ALIGNMASK+1) byte boundary
+ * @iv_offset_relative_to_alignmask: if true, add the algorithm's alignmask to
+ *				     the @iv_offset
+ * @key_offset: misalignment of the key, where 0 is default alignment
+ * @key_offset_relative_to_alignmask: if true, add the algorithm's alignmask to
+ *				      the @key_offset
+ * @finalization_type: what finalization function to use for hashes
+ * @nosimd: execute with SIMD disabled?  Requires !CRYPTO_TFM_REQ_MAY_SLEEP.
+ */
+struct testvec_config {
+	const char *name;
+	enum inplace_mode inplace_mode;
+	u32 req_flags;
+	struct test_sg_division src_divs[XBUFSIZE];
+	struct test_sg_division dst_divs[XBUFSIZE];
+	unsigned int iv_offset;
+	unsigned int key_offset;
+	bool iv_offset_relative_to_alignmask;
+	bool key_offset_relative_to_alignmask;
+	enum finalization_type finalization_type;
+	bool nosimd;
+};
+
 /*
  * cipher_testvec:	structure to describe a symmetric cipher test
  * @key:	Pointer to key
@@ -178,6 +289,30 @@ struct kpp_testvec {
 
 static const char zeroed_string[48];
 
+#define TEST_SG_TOTAL	10000
+
+#define TESTMGR_POISON_BYTE	0xfe
+#define TESTMGR_POISON_LEN	16
+
+static void testmgr_poison(void *addr, size_t len)
+{
+	memset(addr, TESTMGR_POISON_BYTE, len);
+}
+
+
+static unsigned int count_test_sg_divisions(const struct test_sg_division *divs)
+{
+	unsigned int remaining = TEST_SG_TOTAL;
+	unsigned int ndivs = 0;
+
+	do {
+		remaining -= divs[ndivs++].proportion_of_total;
+	} while (remaining);
+
+	return ndivs;
+}
+
+
 /*
  * RSA test vectors. Borrowed from openSSL.
  */
diff --git a/init/main.c b/init/main.c
index aa21add5f..4db7e4edd 100644
--- a/init/main.c
+++ b/init/main.c
@@ -885,6 +885,8 @@ static int __init early_randomize_kstack_offset(char *buf)
 early_param("randomize_kstack_offset", early_randomize_kstack_offset);
 #endif
 
+extern int fips_integrity_init(void);
+
 void __init __weak arch_call_rest_init(void)
 {
 	rest_init();
@@ -986,6 +988,7 @@ asmlinkage __visible void __init __no_sanitize_address start_kernel(void)
 	/* Architectural and non-timekeeping rng init, before allocator init */
 	random_init_early(command_line);
 
+	fips_integrity_init();
 	/*
 	 * These use large bootmem allocations and must precede
 	 * kmem_cache_init()
diff --git a/lib/crypto/Makefile b/lib/crypto/Makefile
index c852f067a..84ec57dba 100644
--- a/lib/crypto/Makefile
+++ b/lib/crypto/Makefile
@@ -7,9 +7,6 @@ libcryptoutils-y				:= memneq.o utils.o
 obj-y						+= chacha.o
 obj-$(CONFIG_CRYPTO_LIB_CHACHA_GENERIC)		+= libchacha.o
 
-obj-$(CONFIG_CRYPTO_LIB_AES)			+= libaes.o
-libaes-y					:= aes.o
-
 obj-$(CONFIG_CRYPTO_LIB_ARC4)			+= libarc4.o
 libarc4-y					:= arc4.o
 
@@ -29,20 +26,11 @@ libcurve25519-generic-y				+= curve25519-generic.o
 obj-$(CONFIG_CRYPTO_LIB_CURVE25519)		+= libcurve25519.o
 libcurve25519-y					+= curve25519.o
 
-obj-$(CONFIG_CRYPTO_LIB_DES)			+= libdes.o
-libdes-y					:= des.o
-
 obj-$(CONFIG_CRYPTO_LIB_POLY1305_GENERIC)	+= libpoly1305.o
 libpoly1305-y					:= poly1305-donna32.o
 libpoly1305-$(CONFIG_ARCH_SUPPORTS_INT128)	:= poly1305-donna64.o
 libpoly1305-y					+= poly1305.o
 
-obj-$(CONFIG_CRYPTO_LIB_SHA1)			+= libsha1.o
-libsha1-y					:= sha1.o
-
-obj-$(CONFIG_CRYPTO_LIB_SHA256)			+= libsha256.o
-libsha256-y					:= sha256.o
-
 ifneq ($(CONFIG_CRYPTO_MANAGER_DISABLE_TESTS),y)
 libblake2s-y					+= blake2s-selftest.o
 libchacha20poly1305-y				+= chacha20poly1305-selftest.o
-- 
2.19.0

